snippet for "General int for loop"
for (int ${1:i} = 0; $1 < ${3:length}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet fun "General function"

/*
	Purpose: $4
	Parameters: $5
	Return Value: $6
*/
${1:void} ${2:function_name}(${3}) {
	${7}
}
endsnippet

snippet fun1 "function with one parameter"

/*
	Purpose: $5
	Parameters: $6
	Return Value: $7
*/
${1:void} ${2:function_name}(${3:Type} ${4:Paramter}) {
	${8}
}
endsnippet

snippet fun2 "function with two parameter"

/*
	Purpose: $7
	Parameters: $8
	Return Value: $9
*/
${1:void} ${2:function_name}(${3:Type} ${4:Paramter}, ${5:Type} ${6:Parameter}) {
	${10}
}
endsnippet

snippet main "Main function with arguments"
int main (int agrc, char **argv) {
	$0
	return 0;
}
endsnippet

snippet mainv "Void main function"
int main (void) {
	$0
	return 0;
}
endsnippet

snippet pr "General printing"
printf ("$1\n$2");
endsnippet

snippet prd "Prints digit"
printf ("${1:}: %d\n", $2);
endsnippet

snippet prf "Prints float"
printf ("${1:}: %f\n", $2);
endsnippet

snippet prx "Print any type"
printf ("${1:}: %${2:d}\n", $3);
endsnippet

snippet if "Basic if statement"
if ($1) {
	${2:${VISUAL}}
}
endsnippet

snippet ife "If else statement"
if ($1) {
	${2:${VISUAL}}
} else {
	${0}
}	
endsnippet

snippet el "else statement"
else {
	${0:${VISUAL}}
}	
endsnippet

snippet elif "else if statement"
else if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet ifi
if ($1) $0;
endsnippet

snippet switch
switch ($1) {
	case $2:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

snippet ter "ternary"
${1} ? {2:a} : {3:b}
endsnippet

snippet mal "mallocing memory"
${1:int}* ${2:arrayName} = ($1*) malloc ((${3:numInts}) * sizeof($1));
if ($2 == NULL) {
	printf("error: malloc failed in $4");
	return ${5:EXIT_FAILURE};
}
endsnippet

snippet scanf "Getting user input"
scanf ("%${1:d}, ${2:pointer})
endsnippet

snippet while "basic while loop"
while ($1) {
	$2
}
endsnippet

snippet dowhile "do while loop"
do {
	$0
} while ($1);	
endsnippet

snippet free "free data"
free ($1);
endsnippet

snippet sc "standard c starter header"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>
#include "${1:`!v expand('%:t:r')`.h}"

$0
endsnippet

snippet ph "program header"
/*
Program Name : ${1:`!v expand('%:t')`} 
Authors      : ${2:Kyle Morrison} 
Date         : ${3:`!v strftime("%a %d %b %Y")`}
Description  : $4
*/

$5
endsnippet

snippet todo "todo statement"
/*
TODO: ${2:Kyle Morrison} ${3:`!v strftime("%c")`}
      ${1:Description}
*/

$0
endsnippet

snippet doc "docstring"

/*
	Purpose: $1
	Parameters: $2
	Return Value: $3
*/
endsnippet 

snippet struct "Creates basic struct template"
typedef struct ${1:person} {
	$3
} ${2:personType};
endsnippet

snippet def "define statment"
#define
endsnippet

snippet inc "include library"
#include <$1>
endsnippet

snippet inch "include header file"
#include "$1"
endsnippet
